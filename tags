!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	simulate_progression.h	/^    A = 0,$/;"	e	enum:Win
B	simulate_progression.h	/^    B = 1,$/;"	e	enum:Win
Hash	simulate_progression.h	/^    struct Hash$/;"	s	struct:Score
HashMapScores	simulate_progression.h	/^typedef std::unordered_map<Score, u32, Score::Hash> HashMapScores;$/;"	t
Pa	simulate_progression.h	/^    double Pa;$/;"	m	struct:WinProbs
Pb	simulate_progression.h	/^    double Pb;$/;"	m	struct:WinProbs
RANDOM_H	random.h	3;"	d
RDTSC_H_	rdtsc.h	9;"	d
SIMULATE_PROGRESSION_H	simulate_progression.h	3;"	d
Score	simulate_progression.h	/^typedef struct Score$/;"	s
Score	simulate_progression.h	/^} Score;$/;"	t	typeref:struct:Score
Tie	simulate_progression.h	/^    Tie = 2$/;"	e	enum:Win
Win	simulate_progression.h	/^enum Win$/;"	g
WinProbs	simulate_progression.h	/^typedef struct WinProbs$/;"	s
WinProbs	simulate_progression.h	/^} WinProbs;$/;"	t	typeref:struct:WinProbs
avg_cycles_per_microsec	rdtsc.cpp	/^double avg_cycles_per_microsec(int iterCount)$/;"	f
bitmap	simulate_progression.h	/^    u32 bitmap;$/;"	m	struct:Score
calculate_prob_win_from_behind	simulate_progression.cpp	/^WinProbs calculate_prob_win_from_behind(const HashMapScores& score_map)$/;"	f
count	simulate_progression.h	/^    u32 count;$/;"	m	struct:Score
debug	main.cpp	/^void debug()$/;"	f
estimate_tsc_per_sec	rdtsc.cpp	/^unsigned long long estimate_tsc_per_sec()$/;"	f
main	main.cpp	/^int main(int argc, char** argv)$/;"	f
max_random	random.cpp	/^static const double max_random = (double)0xFFFFFF;$/;"	v	file:
operator ()	simulate_progression.h	/^        unsigned operator()(const Score& score) const$/;"	f	struct:Score::Hash
operator =	simulate_progression.h	/^    Score& operator=(const Score& rhs)$/;"	f	struct:Score
operator ==	simulate_progression.h	/^    bool operator==(const Score& rhs) const$/;"	f	struct:Score
parse_line	main.cpp	/^vector<string> parse_line(string line)$/;"	f
process_file	main.cpp	/^int process_file(int argc, char** argv)$/;"	f
random_exponential	random.cpp	/^double random_exponential(double Lambda)$/;"	f
random_mask	random.cpp	/^static const ull random_mask = 0xFFFFFF;$/;"	v	file:
random_uniform	random.cpp	/^double random_uniform()$/;"	f
rdtsc	rdtsc.h	/^static __inline__ unsigned long long rdtsc(void)$/;"	f
simulate_progression	simulate_progression.cpp	/^Score simulate_progression(double La, double Lb)$/;"	f
simulate_progression_data	simulate_progression.cpp	/^HashMapScores simulate_progression_data(double La, double Lb, int num_simulations)$/;"	f
u32	simulate_progression.h	/^typedef unsigned int u32;$/;"	t
ull	rdtsc.h	/^typedef unsigned long long ull;$/;"	t
win_from_behind	simulate_progression.cpp	/^enum Win win_from_behind(const Score& score)$/;"	f
